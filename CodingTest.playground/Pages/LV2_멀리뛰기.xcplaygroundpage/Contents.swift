import Foundation

/*
 효진이는 한칸 또는 두칸씩 뛸 수 있는데
 주어진 칸 n이 제공될 때 도달할 수 있는 경우의 수가 총 몇가지인지 리턴
 */
func solution(_ n:Int) -> Int {
    /*
     배열형태의 cache를 생성, n+2 인 이유는 피보나치 수열에 의해 1, 2 를 담고 시작하기위해
     */
    var cache = Array(repeating: 0, count: n+2)
    cache[1] = 1
    cache[2] = 2
    /*
     n의 값이 1, 2 일경우 경우의 수는 한정적이기에 정해진 수치를 반환
     */
    if n < 3 {
        return cache[n]
    }
    /*
     1, 2는 선처리 방어를 하였기에 피보나치 수를 계산하기위해
        현재 i의 이전값인 [i-1]와
        그 이전값인 [i-2]를 더하여 현재의 피보나치 수를 계산
     */
    for i in 3...n {
        cache[i] = (cache[i-1] + cache[i-2]) % 1234567
    }
    /*
     배열에 쌓인 값에서 현재 위치에 해당하는 n의 값을 리턴
     */
    return cache[n]
}

//solution(6)
/*
 풀이를 보고 이해하면서 풀긴 했지만 난이도가 너무 어려웠다. 왜 피보나치를 사용해서 계산하는건지 이해가 아직도 조금 가지 않는다.
 이 문제를 풀고 이해하는데 5시간 넘게 사용해서 우선은 머리를 식히고 다시 이해해야겠다.
 */
